name: Generate RULE-SET
on:
  workflow_dispatch:
  schedule:
    - cron: "00 23 * * *"
  push:
    branches:
      - master
    paths-ignore:
      - "**/README.md"
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Set variables
        run: |
          echo "update_version=$(date -d '+8 hours' +%Y-%m-%d)" >> ${GITHUB_ENV}
          echo "mihomo_domains=https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/classical" >> ${GITHUB_ENV}
          echo "mihomo_ipcidr=https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geoip/classical" >> ${GITHUB_ENV}
          echo "bm7_surge=https://github.com/blackmatrix7/ios_rule_script/raw/refs/heads/master/rule/Surge" >> ${GITHUB_ENV}
        shell: bash

      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Generate directories
        run: |
          mkdir -p download/meta
          mkdir -p download/surge
          mkdir -p download/special
          mkdir -p meta/domain
          mkdir -p meta/ipcidr
          mkdir -p meta/classical
          mkdir -p stash/domain
          mkdir -p stash/ipcidr
          mkdir -p stash/classical
          mkdir -p surge
          mkdir -p shadowrocket
          mkdir -p quantumultx
          mkdir -p loon
          mkdir -p push

      - name: Download meta ruleset
        run: |
          domain_lists=('category-httpdns-cn' 'apple' 'microsoft@cn' 'onedrive' 'microsoft' 'github' 'gitlab' 'gitee' 'gitbook' 'apple-intelligence' 'category-ai-!cn' 'amazon' 'shopify' 'category-ecommerce' 'paypal' 'wise' 'category-cryptocurrency' 'category-game-accelerator-cn' 'category-games@cn' 'category-games' 'category-forums' 'discord' 'line' 'telegram' 'twitter' 'signal' 'meta' 'tiktok' 'bilibili' 'googlefcm' 'youtube' 'google' 'spotify' 'twitch' 'bahamut' 'hbo' 'disney' 'primevideo' 'netflix' 'speedtest' 'tld-!cn' 'category-pt' 'tracker' 'category-anticensorship' 'gfw' 'private' 'nga' 'xiaohongshu' 'sina' 'zhihu' 'douban' 'coolapk')

          for list in "${domain_lists[@]}"; do
              curl -f -L "${mihomo_domains}/${list}.list" | awk '{ gsub(/[[:cntrl:]]/, "", $0) } { gsub(/[^:]\/\/.*/, "", $0) } { gsub(/ /, "", $0) } /^\s*[#;]/ { next } /^$/ { next } { print $0 } END { print "" }' > "download/meta/${list}.list" || { echo "Download Failed: ${list}.list"; exit 1; }
          done

          ipcidr_lists=('facebook' 'telegram' 'twitter' 'google' 'netflix' 'private')

          for list in "${ipcidr_lists[@]}"; do
              curl -f -L "${mihomo_ipcidr}/${list}.list" | awk '{ gsub(/[[:cntrl:]]/, "", $0) } { gsub(/[^:]\/\/.*/, "", $0) } { gsub(/ /, "", $0) } /^\s*[#;]/ { next } /^$/ { next } { print $0 } END { print "" }' >> "download/meta/${list}.list" || { echo "Download Failed: ${list}.list"; exit 1; }
          done

          files=(
              'cncidr.list https://github.com/Loyalsoldier/geoip/raw/refs/heads/release/surge/cn.txt'
              'talkatone.list https://github.com/LOWERTOP/Shadowrocket-First/raw/refs/heads/main/TalkatoneProxy.list'
              'SpeedTest.list https://github.com/LM-Firefly/Rules/raw/refs/heads/master/SpeedTest.list'
              'iplocation-reject.list https://github.com/SunsetMkt/anti-ip-attribution/raw/refs/heads/main/generated/rule-set-reject.list'
              'iplocation-direct.list https://github.com/SunsetMkt/anti-ip-attribution/raw/refs/heads/main/generated/rule-set-direct.list'
              'iplocation-proxy.list https://github.com/SunsetMkt/anti-ip-attribution/raw/refs/heads/main/generated/rule-set-proxy.list'
              'crypto.list https://github.com/ACL4SSR/ACL4SSR/raw/refs/heads/master/Clash/Ruleset/Crypto.list'
              'ai.list https://github.com/ACL4SSR/ACL4SSR/raw/refs/heads/master/Clash/Ruleset/AI.list'
          )
          for file in "${files[@]}"; do
              set -- $file
              curl -f -L "$2" | awk '{ gsub(/[[:cntrl:]]/, "", $0) } { gsub(/[^:]\/\/.*/, "", $0) } { gsub(/ /, "", $0) } /^\s*[#;]/ { next } /^$/ { next } { print $0 } END { print "" }' > "download/meta/$1" || { echo "Download Failed: $1"; exit 1; }
          done

          curl -f -L 'https://github.com/LM-Firefly/Rules/raw/refs/heads/master/Domestic-Services/ByteDance.list' | sed -n '/## >> 抖音/,/##/{//!p}' | awk '{ gsub(/[[:cntrl:]]/, "", $0) } { gsub(/[^:]\/\/.*/, "", $0) } { gsub(/ /, "", $0) } /^\s*[#;]/ { next } /^$/ { next } { print $0 } END { print "" }' > "download/meta/douyin.list" || { echo "Download Failed: douyin.list"; exit 1; }

      - name: Download surge ruleset
        run: |
          surge_lists=('AppleProxy' 'Download' 'OneDrive' 'Microsoft' 'GitHub' 'GitLab' 'Gitee' 'GitBook' 'Amazon' 'eBay' 'Shopee' 'Shopify' 'PayPal' 'Crypto' 'Cryptocurrency' 'SteamCN' 'Game' 'Reddit' 'Discord' 'Whatsapp' 'Line' 'Threads' 'Instagram' 'Facebook' 'Twitter' 'TikTok' 'BiliBili' 'GoogleFCM' 'YouTube' 'Google' 'Spotify' 'Twitch' 'Bahamut' 'HBO' 'Disney' 'PrimeVideo' 'Netflix' 'Speedtest' 'Lan' 'NGA' 'XiaoHongShu' 'Weibo' 'Zhihu' 'DouBan' 'Coolapk')

          for list in "${surge_lists[@]}"; do
              curl -f -L "${bm7_surge}/${list}/${list}.list" | awk '{ gsub(/[[:cntrl:]]/, "", $0) } { gsub(/[^:]\/\/.*/, "", $0) } { gsub(/ /, "", $0) } /^\s*[#;]/ { next } /^$/ { next } { print $0 } END { print "" }' > "download/surge/${list}.list" || { echo "Download Failed: ${list}.list"; exit 1; }
          done

          files=(
              'ChinaMax.list https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Surge/ChinaMax/ChinaMax_All.list'
              'GameDownloadCN.list https://github.com/blackmatrix7/ios_rule_script/raw/refs/heads/master/rule/Surge/Game/GameDownloadCN/GameDownloadCN.list'
              'GameDownload.list https://github.com/blackmatrix7/ios_rule_script/raw/refs/heads/master/rule/Surge/Game/GameDownload/GameDownload.list'
              'Apple.list https://github.com/blackmatrix7/ios_rule_script/raw/refs/heads/master/rule/Surge/Apple/Apple_All.list'
              'GFW.list https://github.com/blackmatrix7/ios_rule_script/raw/refs/heads/master/rule/Surge/Proxy/Proxy_All.list'
              'Proxy.list https://github.com/blackmatrix7/ios_rule_script/raw/refs/heads/master/rule/Surge/Global/Global_All.list'
              'apple-proxy.list https://github.com/Elysian-Realme/FuGfConfig/raw/refs/heads/main/ConfigFile/Loon/Apple/no-cn-cdn-domain.list'
              'httpdns.list https://github.com/VirgilClyne/GetSomeFries/raw/refs/heads/main/ruleset/HTTPDNS.Block.list'
              'pcdn.list https://github.com/uselibrary/PCDN/raw/refs/heads/main/pcdn.list'
              'adrules.list https://github.com/Cats-Team/AdRules/raw/refs/heads/main/adrules-surge.conf'
              'rejectAD.list https://github.com/fmz200/wool_scripts/raw/refs/heads/main/Loon/rule/rejectAd.list'
              'global.list https://github.com/SukkaW/Surge/raw/refs/heads/master/Source/non_ip/global.conf'
              'ai.list https://github.com/ConnersHua/RuleGo/raw/refs/heads/master/Surge/Ruleset/Extra/AI.list'
          )
          for file in "${files[@]}"; do
              set -- $file
              curl -f -L "$2" | awk '{ gsub(/[[:cntrl:]]/, "", $0) } { gsub(/[^:]\/\/.*/, "", $0) } { gsub(/ /, "", $0) } /^\s*[#;]/ { next } /^$/ { next } { print $0 } END { print "" }' > "download/surge/$1" || { echo "Download Failed: $1"; exit 1; }
          done

      - name: Download special ruleset
        run: |
          files=(
              'ai.list https://ruleset.skk.moe/List/non_ip/ai.conf'
              'cdn-domains.list https://ruleset.skk.moe/Clash/domainset/cdn.txt'
              'download-domains.list https://ruleset.skk.moe/Clash/domainset/download.txt'
              'cdn-surge.list https://ruleset.skk.moe/List/non_ip/cdn.conf'
              'download-surge.list https://ruleset.skk.moe/List/non_ip/download.conf'
              'speedtest-domains.list https://ruleset.skk.moe/Clash/domainset/speedtest.txt'
              'apple-cn-special.list https://ruleset.skk.moe/Clash/non_ip/apple_cn.txt'
              'apple-cn.list https://github.com/felixonmars/dnsmasq-china-list/raw/refs/heads/master/apple.china.conf'
              'cn.list https://github.com/felixonmars/dnsmasq-china-list/raw/refs/heads/master/accelerated-domains.china.conf'
              'DMCA-Sensitive.list https://github.com/LM-Firefly/Rules/raw/refs/heads/master/Special/DMCA-Sensitive.list'
              'trackers-XIU2.list https://github.com/XIU2/TrackersListCollection/raw/refs/heads/master/all.txt'
              'trackers-ngosang.list https://github.com/ngosang/trackerslist/raw/refs/heads/master/trackers_all.txt'
              'applications-yaml.list https://github.com/Loyalsoldier/clash-rules/raw/refs/heads/release/applications.txt'
              'proxy.list https://github.com/Loyalsoldier/v2ray-rules-dat/raw/refs/heads/release/proxy-list.txt'
              'fake-ip-filter-sc.list https://github.com/juewuy/ShellCrash/raw/refs/heads/dev/public/fake_ip_filter.list'
              'fake-ip-filter-oc.list https://github.com/vernesong/OpenClash/raw/refs/heads/master/luci-app-openclash/root/etc/openclash/custom/openclash_custom_fake_filter.list'
          )
          counter=0
          for file in "${files[@]}"; do
              set -- $file
              if [ "$counter" -ge 0 ] && [ "$counter" -le 6 ]; then
                  curl -f -L "$2" | sed -e '/this_ruleset_is_made_by_sukkaw.ruleset.skk.moe/d' | awk '{ gsub(/[[:cntrl:]]/, "", $0) } { gsub(/[^:]\/\/.*/, "", $0) } { gsub(/ /, "", $0) } /^\s*[#;]/ { next } /^$/ { next } { print $0 } END { print "" }' > "download/special/$1" || { echo "Download Failed: $1"; exit 1; }
              elif [ "$counter" -ge 7 ] && [ "$counter" -le 8 ]; then
                  curl -f -L "$2" | awk '{ gsub(/[[:cntrl:]]/, "", $0) } { gsub(/[^:]\/\/.*/, "", $0) } { gsub(/ /, "", $0) } /^\s*[#;]/ { next } /^$/ { next } { print $0 } END { print "" }' | awk '{gsub(/^server=\//, "DOMAIN-SUFFIX,"); gsub(/\/114\.114\.114\.114$/, ""); print}' > "download/special/$1" || { echo "Download Failed: $1"; exit 1; }
              else
                  curl -f -L "$2" | awk '{ gsub(/[[:cntrl:]]/, "", $0) } { gsub(/[^:]\/\/.*/, "", $0) } { gsub(/ /, "", $0) } /^\s*[#;]/ { next } /^$/ { next } { print $0 } END { print "" }' > "download/special/$1" || { echo "Download Failed: $1"; exit 1; }
              fi
              counter=$((counter + 1))
          done

      - name: Copy single files
        run: |
          src_dir="download/meta"
          dst_dir="surge"

          src_names=('iplocation-direct' 'iplocation-proxy' 'douyin' 'talkatone' 'microsoft@cn' 'tld-!cn' 'cncidr')
          dst_names=('iplocation-direct' 'iplocation-proxy' 'douyin' 'talkatone' 'microsoft-cn' 'tld-proxy' 'cncidr')

          for i in "${!dst_names[@]}"; do
              src_file="$src_dir/${src_names[i]}.list"
              dst_file="$dst_dir/${dst_names[i]}.list"
              cp "$src_file" "$dst_file"
          done
          cp 'custom/apns.list' 'surge/apns.list'

      - name: Merge ruleset
        run: |
          src1_dir="download/meta"
          src2_dir="download/surge"
          dst_dir="surge"

          src1_names=('apple' 'onedrive' 'microsoft' 'paypal' 'tiktok' 'bilibili' 'googlefcm' 'youtube' 'google' 'spotify' 'twitch' 'bahamut' 'hbo' 'disney' 'primevideo' 'netflix' 'private')

          src2_names=('Apple' 'OneDrive' 'Microsoft' 'PayPal' 'TikTok' 'BiliBili' 'GoogleFCM' 'YouTube' 'Google' 'Spotify' 'Twitch' 'Bahamut' 'HBO' 'Disney' 'PrimeVideo' 'Netflix' 'Lan')

          dst_names=('apple' 'onedrive' 'microsoft' 'paypal' 'tiktok' 'bilibili' 'googlefcm' 'youtube' 'google' 'spotify' 'twitch' 'bahamut' 'hbo' 'disney' 'primevideo' 'netflix' 'private')

          for i in "${!dst_names[@]}"; do
              src1_file="$src1_dir/${src1_names[i]}.list"
              src2_file="$src2_dir/${src2_names[i]}.list"
              dst_file="$dst_dir/${dst_names[i]}.list"

              cat "$src1_file" "$src2_file" > "$dst_file"
          done

      - name: Merge httpdns file
        run: |
          cat 'download/meta/category-httpdns-cn.list' \
              'download/meta/iplocation-reject.list' \
              'download/surge/httpdns.list' \
          > surge/httpdns.list

      - name: Merge adrules file
        run: |
          cat 'download/surge/adrules.list' \
              'download/surge/rejectAD.list' \
              'download/surge/pcdn.list' \
              'surge/httpdns.list' \
          > surge/adrules.list

      - name: Merge apple-proxy file
        run: |
          cat 'download/surge/apple-proxy.list' \
              'download/surge/AppleProxy.list' \
          > surge/apple-proxy.list

      - name: Merge apple-cn file
        run: |
          cat 'download/special/apple-cn-special.list' \
              'download/special/apple-cn.list' \
          > surge/apple-cn.list

      - name: Merge games-cn file
        run: |
          cat 'download/meta/category-game-accelerator-cn.list' \
              'download/meta/category-games@cn.list' \
              'download/surge/SteamCN.list' \
              'download/surge/GameDownloadCN.list' \
          > surge/games-cn.list

      - name: Merge games file
        run: |
          cat 'surge/games-cn.list' \
              'download/meta/category-games.list' \
              'download/surge/Game.list' \
              'download/surge/GameDownload.list' \
          > surge/games.list

      - name: Merge gits file
        run: |
          cat 'download/surge/GitHub.list' \
              'download/surge/GitLab.list' \
              'download/surge/Gitee.list' \
              'download/surge/GitBook.list' \
              'download/meta/github.list' \
              'download/meta/gitlab.list' \
              'download/meta/gitee.list' \
              'download/meta/gitbook.list' \
          > surge/gits.list

      - name: Merge ai file
        run: |
          cat 'download/surge/ai.list' \
              'download/special/ai.list' \
              'download/meta/apple-intelligence.list' \
              'download/meta/category-ai-!cn.list' \
              'download/meta/ai.list' \
          > surge/ai.list

      - name: Merge ecommerce file
        run: |
          cat 'download/surge/Amazon.list' \
              'download/surge/eBay.list' \
              'download/surge/Shopee.list' \
              'download/surge/Shopify.list' \
              'download/meta/category-ecommerce.list' \
              'download/meta/amazon.list' \
              'download/meta/shopify.list' \
          > tmp-ecommerce.list
          grep -vxF -f 'surge/primevideo.list' 'tmp-ecommerce.list' > 'surge/ecommerce.list'

      - name: Merge crypto file
        run: |
          cat 'custom/crypto.list' \
              'download/surge/Crypto.list' \
              'download/surge/Cryptocurrency.list' \
              'download/meta/crypto.list' \
              'download/meta/category-cryptocurrency.list' \
              'download/meta/wise.list' \
          > surge/crypto.list

      - name: Merge socialmedia-cn file
        run: |
          cat 'download/surge/NGA.list' \
              'download/surge/XiaoHongShu.list' \
              'download/surge/Weibo.list' \
              'download/surge/Zhihu.list' \
              'download/surge/DouBan.list' \
              'download/surge/Coolapk.list' \
              'download/meta/nga.list' \
              'download/meta/xiaohongshu.list' \
              'download/meta/sina.list' \
              'download/meta/zhihu.list' \
              'download/meta/douban.list' \
              'download/meta/coolapk.list' \
          > surge/socialmedia-cn.list

      - name: Merge socialmedia file
        run: |
          cat 'custom/telegram.list' \
              'download/surge/Discord.list' \
              'download/surge/Whatsapp.list' \
              'download/surge/Line.list' \
              'download/surge/Threads.list' \
              'download/surge/Instagram.list' \
              'download/surge/Facebook.list' \
              'download/surge/Twitter.list' \
              'download/meta/discord.list' \
              'download/meta/line.list' \
              'download/meta/telegram.list' \
              'download/meta/twitter.list' \
              'download/meta/signal.list' \
              'download/meta/meta.list' \
          > surge/socialmedia.list

      - name: Merge forum file
        run: |
          cat 'download/surge/Reddit.list' \
              'download/meta/category-forums.list' \
          > surge/forum.list

      - name: Merge cdn file
        run: |
          awk '/^+\./ { sub(/^+\./, "DOMAIN-SUFFIX,"); print; next } /./ { print "DOMAIN," $0 }' 'download/special/cdn-domains.list' > 'cdn-classical.list'

          awk '/^+\./ { sub(/^+\./, "DOMAIN-SUFFIX,"); print; next } /./ { print "DOMAIN," $0 }' 'download/special/download-domains.list' > 'download-classical.list'

          cat 'cdn-classical.list' \
              'download-classical.list' \
              'download/special/cdn-surge.list' \
              'download/special/download-surge.list' \
              'custom/cdn.list' \
          > surge/cdn.list

      - name: Merge speedtest file
        run: |
          awk '/^+\./ { sub(/^+\./, "DOMAIN-SUFFIX,"); print; next } /./ { print "DOMAIN," $0 }' 'download/special/speedtest-domains.list' > 'speedtest-classical.list'

          cat 'custom/speedtest.list' \
              'speedtest-classical.list' \
              'download/meta/speedtest.list' \
              'download/meta/SpeedTest.list' \
              'download/surge/Speedtest.list' \
          > surge/speedtest.list

      - name: Merge gfw file
        run: |
          cat 'download/meta/category-anticensorship.list' \
              'download/meta/gfw.list' \
              'download/surge/GFW.list' \
          > surge/gfw.list

      - name: Merge proxy file
        run: |
          awk '
          /^full:/   { sub(/^full:/, "DOMAIN,"); print; next }
          /^regexp:/ { sub(/^regexp:/, "DOMAIN-REGEX,"); print; next }
          /./ { print "DOMAIN-SUFFIX," $0 }
          ' 'download/special/proxy.list' > proxy.list

          grep -vxF -f 'surge/tld-proxy.list' 'download/surge/global.list' > 'global.list'

          cat 'global.list' \
              'surge/crypto.list' \
              'surge/gfw.list' \
              'proxy.list' \
              'download/surge/Proxy.list' \
              'custom/proxy.list' \
          > surge/proxy.list

      - name: Merge DMCA file
        run: |
          cat 'download/special/trackers-XIU2.list' \
              'download/special/trackers-ngosang.list' \
          > 'trackers.list'

          grep -oP '([a-zA-Z0-9-]+\.)+[a-zA-Z]{2,}' 'trackers.list'| sed 's/^/DOMAIN,/' > 'tracker_domains.list'

          grep -oP '([0-9]{1,3}\.){3}[0-9]{1,3}' 'trackers.list' | sed 's/^/IP-CIDR,/; s/$/\/32/' > 'trackersV4.list'

          grep -oP '(?<=\[).*?(?=\])' 'trackers.list' | sed 's/^/IP-CIDR6,/; s/$/\/128/' > 'trackersV6.list'

          grep -v 'payload:' 'download/special/applications-yaml.list' | sed -e 's/^[ \t]*- //' > 'applications.list'

          cat 'tracker_domains.list' \
              'trackersV4.list' \
              'trackersV6.list' \
              'applications.list' \
              'download/special/DMCA-Sensitive.list' \
              'download/meta/category-pt.list' \
              'download/meta/tracker.list' \
              'download/surge/Download.list' \
          > surge/dmca.list

      - name: Process raw ruleset
        run: |
          source scripts/ruleset_process.sh
          sed -i '/^IP-CIDR,/ { /:/ s/IP-CIDR,/IP-CIDR6,/ }; /^\(OR\|AND\|NOT\)/{ /\(IP-CIDR\|IP-ASN\|GEOIP\)/d }; /^\(IP-CIDR\|IP-ASN\|GEOIP\)/{ /,no-resolve$/!s/$/,no-resolve/ }' surge/*.list

          for file in surge/*.list ; do
              sort "${file}" | uniq | domain_dedupe | ruleset_sort > tmp.list && mv tmp.list "${file}"
          done

          awk '/^DOMAIN,|^DOMAIN-SUFFIX,/ { print }' 'download/surge/ChinaMax.list' > ChinaMax.list
          sort 'ChinaMax.list' 'download/special/cn.list' | uniq > cn-without-redundant.list
          sort 'custom/direct-need-to-remove.list' 'surge/tld-proxy.list' 'surge/cdn.list' 'surge/proxy.list' | uniq > remove.list
          sort 'cn-without-redundant.list' 'remove.list' | uniq | domain_dedupe | grep -vxF -f 'remove.list' | ruleset_sort > 'surge/cn.list'

          sort 'download/special/fake-ip-filter-sc.list' 'download/special/fake-ip-filter-oc.list' 'custom/fake-ip-filter.list' | uniq | fakeip_dedupe > 'meta/domain/fake-ip-filter.list'

      - name: Generate meta ruleset
        run: |
          for file in surge/*.list; do
              awk '{
                  if ($0 ~ /^URL-REGEX,/ || $0 ~ /^USER-AGENT,/) {
                      next;
                  }
                  if ($0 ~ /^DOMAIN-WILDCARD,/) {
                      gsub(/^DOMAIN-WILDCARD,/,"DOMAIN-REGEX,^");
                      gsub(/\./,"\\.");
                      gsub(/\?/,"[\\w.-]");
                      gsub(/\*/,"[\\w.-]*?");
                      $0 = $0 "$";
                  }
                  gsub(/DEST-PORT/, "DST-PORT");
                  print;
              }' "$file" > "meta/$(basename "$file")"
          done

      - name: Generate meta domains
        run: |
          for file in meta/*.list; do
              filename=$(basename "$file" .list)

              awk -v output="meta/domain/${filename}.list" '
              /^DOMAIN,|^DOMAIN-SUFFIX,/ {
                  if ($0 ~ /^DOMAIN-SUFFIX,/) {
                      gsub(/^DOMAIN-SUFFIX,/, "+.");
                  } else {
                      gsub(/^DOMAIN,/, "");
                  }
                  print > output;
              }
              ' "$file"
          done
          grep -vxF -f 'meta/domain/bilibili.list' 'meta/domain/cn.list' > 'meta/domain/cn-b.list'
          grep -vxF -f 'meta/domain/socialmedia-cn.list' 'meta/domain/cn-b.list' > 'meta/domain/cn-bs.list'
          grep -vxF -f 'meta/domain/douyin.list' 'meta/domain/cn-b.list' > 'meta/domain/cn-bd.list'
          grep -vxF -f 'meta/domain/socialmedia-cn.list' 'meta/domain/cn-bd.list' > 'meta/domain/cn-bsd.list'

      - name: Generate meta ipcidr
        run: |
          for file in meta/*.list; do
              filename=$(basename "$file" .list)

              awk -v output="meta/ipcidr/${filename}.list" '
              /^IP-CIDR6?,/ {
                  gsub(/^IP-CIDR6?,/, "");
                  gsub(/,no-resolve$/, "");
                  print > output;
              }
              ' "$file"
          done
          mv meta/ipcidr/cncidr.list meta/ipcidr/cn.list

      - name: Generate meta remaining rules
        run: |
          awk '!/^DOMAIN,|^DOMAIN-SUFFIX,|^IP-CIDR6?,/ { print }' meta/cdn.list > meta/classical/cdn.list
          awk '!/^DOMAIN,|^DOMAIN-SUFFIX,|^IP-CIDR6?,/ { print }' meta/dmca.list > meta/classical/dmca.list
          awk '!/^DOMAIN,|^DOMAIN-SUFFIX,|^IP-CIDR6?,/ { print }' meta/adrules.list > meta/classical/adrules.list
          awk '{ gsub(/,no-resolve/, ""); print }' meta/cncidr.list > meta/cncidr-resolve.list

      - name: Download and unzip `mihomo core`
        run: |
          mihomo_version=$(curl -sSL https://api.github.com/repos/MetaCubeX/mihomo/releases | grep 'tag_name' | grep -v 'Alpha' | head -n 1 | sed -e 's/.*v/v/' -e 's/".*//')
          wget "https://github.com/MetaCubeX/mihomo/releases/download/${mihomo_version}/mihomo-linux-amd64-${mihomo_version}.gz" -O - | gzip -d > ./mihomo
          chmod +x ./mihomo

      - name: Generate mihomo mrs
        run: |
          for file in meta/domain/*.list ; do
              ./mihomo convert-ruleset domain text "${file}" "${file%.list}.mrs"
          done

          for file in meta/ipcidr/*.list ; do
              ./mihomo convert-ruleset ipcidr text "${file}" "${file%.list}.mrs"
          done

      - name: Generate stash ruleset
        run: |
          for file in surge/*.list; do
              awk '{
                  gsub(/DEST-PORT/, "DST-PORT");
                  print;
              }' "$file" > "stash/$(basename "$file")"
          done

          awk '!/^DOMAIN,|^DOMAIN-SUFFIX,|^IP-CIDR6?,/ { print }' stash/cdn.list > stash/classical/cdn.list
          awk '!/^DOMAIN,|^DOMAIN-SUFFIX,|^IP-CIDR6?,/ { print }' stash/dmca.list > stash/classical/dmca.list
          awk '!/^DOMAIN,|^DOMAIN-SUFFIX,|^IP-CIDR6?,/ { print }' stash/adrules.list > stash/classical/adrules.list

          cp -r meta/domain stash
          cp -r meta/ipcidr stash

          rm -f stash/domain/cn-*
          rm -f stash/domain/fake-ip-filter.*

      - name: Generate surge ruleset
        run: |
          for file in surge/*.list; do
              awk '{
                  if ($0 ~ /^DOMAIN-REGEX,/) {
                      next;
                  }
                  gsub(/DST-PORT/, "DEST-PORT");
                  print;
              }' "$file" > tmp.list && mv tmp.list "${file}"
          done
          awk '{ gsub(/,no-resolve/, ""); print }' surge/cncidr.list > surge/cncidr-resolve.list

      - name: Generate shadowrocket ruleset
        run: |
          for file in surge/*.list; do
              awk '{
                  if ($0 ~ /^PROCESS-NAME,/) {
                      next;
                  }
                  gsub(/DEST-PORT/, "DST-PORT");
                  gsub(/IP-CIDR6/, "IP-CIDR");
                  print;
              }' "$file" > "shadowrocket/$(basename "$file")"
          done
          awk '{ gsub(/,no-resolve/, ""); print }' shadowrocket/cncidr.list > shadowrocket/cncidr-resolve.list

      - name: Generate quantumultx ruleset
        run: |
          for file in surge/*.list; do
              awk -v filename="$(basename "$file" .list)" '{
                  if ($0 ~ /^PROCESS-NAME,/ || $0 ~ /^URL-REGEX,/ || $0 ~ /^DEST-PORT,/ || $0 ~ /^AND,/ || $0 ~ /^OR,/ || $0 ~ /^NOT,/) {
                      next;
                  }
                  gsub(/DOMAIN/, "HOST");
                  gsub(/DOMAIN-SUFFIX/, "HOST-SUFFIX");
                  gsub(/DOMAIN-KEYWORD/, "HOST-KEYWORD");
                  gsub(/DOMAIN-WILDCARD/, "HOST-WILDCARD");
                  gsub(/IP-CIDR6/, "IP6-CIDR");
                  gsub(/,no-resolve/, "");
                  print $0 "," filename;
              }' "$file" > "quantumultx/$(basename "$file")"
          done

      - name: Generate loon ruleset
        run: |
          for file in surge/*.list; do
              awk '{
                  if ($0 ~ /^DOMAIN-WILDCARD,/ || $0 ~ /^PROCESS-NAME,/) {
                      next;
                  }
                  print;
              }' "$file" > "loon/$(basename "$file")"
          done
          awk '{ gsub(/,no-resolve/, ""); print }' loon/cncidr.list > loon/cncidr-resolve.list

      - name: move files to push directory
        run: |
          cp -r meta/ push/
          cp -r stash/ push/
          cp -r surge/ push/
          cp -r shadowrocket/ push/
          cp -r quantumultx/ push/
          cp -r loon/ push/

      - name: Git push assets to "ruleset" branch
        run: |
          cd push || exit 1
          git init
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git checkout -b ruleset
          git add .
          git commit -m "Auto Update Ruleset ${update_version}"
          git remote add origin "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git push -f origin ruleset

      - name: Purge jsdelivr CDN
        run: |
          cd push || exit 1
          for file in $(ls); do
              curl -i "https://purge.jsdelivr.net/gh/${{ github.repository }}@ruleset/${file}"
          done

      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 3
          keep_minimum_runs: 1
